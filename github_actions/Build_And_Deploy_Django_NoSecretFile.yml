name: Deploy to Amazon EKS v2
on:
  push:
    branches:
      - staging
      - master
  workflow_dispatch:

env:
  ECR_REPOSITORY: cb_service_payment_staging
  RELEASE_REVISION: ${{ github.sha }}
  KUBE_NAMESPACE: cb-micro-services
  DEPLOYMENT_NAME: deployment-cb-service-payment
  CONTAINER_APP_NAME: cb-service-payment
  ENVIRONMENT: staging

jobs:
  define-vars:
    name: Define Deploy Vars
    runs-on: ubuntu-latest
    outputs:
      ECR_REPOSITORY: ${{ steps.set-output-workflows.outputs.ECR_REPOSITORY }}
      ENVIRONMENT: ${{ steps.set-output-workflows.outputs.ENVIRONMENT }}
      RELEASE_REVISION: ${{ steps.set-output-workflows.outputs.RELEASE_REVISION }}
      DEPLOYMENT_NAME: ${{ steps.set-output-workflows.outputs.DEPLOYMENT_NAME }}
      KUBE_NAMESPACE: ${{ steps.set-output-workflows.outputs.KUBE_NAMESPACE }}
      CONTAINER_APP_NAME: ${{ steps.set-output-workflows.outputs.CONTAINER_APP_NAME }}
      KUBE_CONFIG_DATA: ${{ steps.set-output-workflows.outputs.KUBE_CONFIG_DATA }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Set env to default
        run: |
          echo "KUBE_CONFIG_DATA=KUBE_CONFIG_DATA_STAGING" >> $GITHUB_ENV
        shell: bash

      - name: Set env to production
        if: endsWith(github.ref, '/master')
        run: |
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "KUBE_CONFIG_DATA=KUBE_CONFIG_DATA_PROD" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=cb_service_payment_production" >> $GITHUB_ENV
        shell: bash

      - name: Set outputs for reusable workflows
        id: set-output-workflows
        run: |
          echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "RELEASE_REVISION=${{ env.RELEASE_REVISION }}" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_NAME=${{ env.DEPLOYMENT_NAME }}" >> $GITHUB_OUTPUT
          echo "KUBE_NAMESPACE=${{ env.KUBE_NAMESPACE }}" >> $GITHUB_OUTPUT
          echo "CONTAINER_APP_NAME=${{ env.CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
          echo "KUBE_CONFIG_DATA=${{ env.KUBE_CONFIG_DATA }}" >> $GITHUB_OUTPUT

  build-ecr:
    needs: [ define-vars ]
    uses: ConsiliumBots/DevOPS/.github/workflows/build-django-nosecretsdjango.yml@master
    with:
      ENVIRONMENT: ${{needs.define-vars.outputs.ENVIRONMENT}}
      ECR_REPOSITORY: ${{needs.define-vars.outputs.ECR_REPOSITORY}}
      RELEASE_REVISION: ${{needs.define-vars.outputs.RELEASE_REVISION}}

    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      GH_APP_CREDENTIALS_TOKEN: ${{ secrets.GH_APP_CREDENTIALS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      LOGDNA_INGESTION_KEY: ${{ secrets.LOGDNA_INGESTION_KEY }}
      BOT_SLACK_TOKEN: ${{ secrets.BOT_SLACK_TOKEN }}
      BOT_SLACK_CHANNEL: ${{ secrets.BOT_SLACK_CHANNEL }}

  deploy-eks:
    needs: [ define-vars, build-ecr ]
    uses: ConsiliumBots/DevOPS/.github/workflows/deploy-django.yml@master
    with:
      ENVIRONMENT: ${{needs.define-vars.outputs.ENVIRONMENT}}
      ECR_REPOSITORY: ${{needs.define-vars.outputs.ECR_REPOSITORY}}
      RELEASE_REVISION: ${{needs.define-vars.outputs.RELEASE_REVISION}}
      DEPLOYMENT_NAME: ${{needs.define-vars.outputs.DEPLOYMENT_NAME}}
      KUBE_NAMESPACE: ${{needs.define-vars.outputs.KUBE_NAMESPACE}}
      CONTAINER_APP_NAME: ${{needs.define-vars.outputs.CONTAINER_APP_NAME}}

    secrets:
      KUBE_CONFIG_DATA: ${{ secrets[needs.define-vars.outputs.KUBE_CONFIG_DATA] }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      BOT_SLACK_CHANNEL: ${{ secrets.BOT_SLACK_CHANNEL }}
      BOT_SLACK_TOKEN: ${{ secrets.BOT_SLACK_TOKEN }}
